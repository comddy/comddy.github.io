<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python学习笔记</title>
    <link href="/2021/04/24/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/24/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python-笔记"><a href="#python-笔记" class="headerlink" title="python 笔记"></a>python 笔记</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><strong>字典键–值关系</strong></p><table><thead><tr><th>名称</th><th>唯一性</th><th>可存储数据类型</th><th>可变性</th></tr></thead><tbody><tr><td>key(键)</td><td>唯一</td><td>数字、字符串、元组</td><td>不可变</td></tr><tr><td>value(值)</td><td>不唯一</td><td>任意</td><td>可变</td></tr></tbody></table><p><strong>字典常用方法</strong></p><table><thead><tr><th>描述</th><th>方法</th></tr></thead><tbody><tr><td>创建空列表</td><td>d = {} 或 d = dict()</td></tr><tr><td>插入元素</td><td>d[“key”] = value</td></tr><tr><td>更新元素</td><td>d[“key”] = new_value  # 存在覆盖,不存在则插入<br>或 d.update({“a”:1,”b”,2}) # 同上</td></tr><tr><td>删除元素</td><td>del key[“key”] # 不返回值<br>或 d.pop(“key”) # 返回被删除键对应的值,不存在key均会报错</td></tr><tr><td>获取key值</td><td>d[“key”]  # 不存在会报错<br>d.get(“key”) # 不存在会返回None</td></tr><tr><td>清空字典</td><td>d.clear() 或 d = {}</td></tr><tr><td>销毁字典</td><td>del d</td></tr><tr><td>插入获取结合</td><td>d.setdefault(key,value) # 存在key则返回key的值，不然插入key:value</td></tr><tr><td>获取字典items</td><td>list(d.items()) # 返回列表，列表包含元组</td></tr><tr><td>获取字典keys</td><td>list(d.keys())</td></tr><tr><td>删除字典最后的键值对</td><td>d.popitem() # 返回元组</td></tr><tr><td>获取字典values</td><td>list(d.values())</td></tr><tr><td>判断键是否存在</td><td>key in d 或 key not in d</td></tr></tbody></table><p><strong>用字典格式化字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 括号里写键值,使用于大量需要格式化的字符串</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;我爱%(language)s,python爱%(me)s&quot;</span>  <br>d = &#123;<span class="hljs-string">&quot;language&quot;</span>:<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-string">&quot;me&quot;</span>:<span class="hljs-string">&quot;我&quot;</span>&#125;<br>new_str = <span class="hljs-built_in">str</span> % d<br><span class="hljs-built_in">print</span>(new_str)<br><span class="hljs-comment"># 我爱python,python爱我</span><br></code></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>列表常用方法</strong></p><table><thead><tr><th>描述</th><th>方法</th></tr></thead><tbody><tr><td>创建列表</td><td>t = [1,2,3]</td></tr><tr><td>取值</td><td>t[index]</td></tr><tr><td>取索引</td><td>t[value]</td></tr><tr><td>新增</td><td>t.append(value) # 在最后插入<br>t.insert(index,value) # 在index处插入</td></tr><tr><td>修改</td><td>t[index] = new_value</td></tr><tr><td>删除</td><td>del t[index] # 删除指定索引的数据<br />t.pop(index) # 删除并返回指定索引的数据<br />t.remove(value) # 删除list中第一个value<br />t.pop() # 删除并返回末尾的数据</td></tr><tr><td>合并</td><td>new_t = t + [1,2,3] # 合并成一个新list<br />t.extend([1,2.3]) # 将list追加到 t 的末尾（建议）</td></tr><tr><td>排序</td><td># 就地排序(默认顺序),True逆序<br>t.sort(reverse=False)<br />t.sort(key=len) # key 接受一个函数，根据函数排序，例如len根据字符串长度顺排<br />sorted_t = sroted(t) # sorted排序任意序列<br />t.reverse() # 就地逆序<br />reversed(t) # 返回t逆序的迭代器</td></tr><tr><td>唯一有序列表</td><td>sorted_only_one = set(t.sort())</td></tr></tbody></table><p><strong>列表内置函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># zip</span><br><span class="hljs-comment"># zip用于配对两个列表或元组，返回一个配对好的迭代器</span><br>a,b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-comment"># 可用dict()转换为字典,第一个参数做key,第二个参数做value</span><br>z = <span class="hljs-built_in">zip</span>(a,b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>(z)) <span class="hljs-comment"># &#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;, 3: &#x27;c&#x27;&#125;</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> z:<br>    <span class="hljs-built_in">print</span>(row) <span class="hljs-comment"># (1, &#x27;a&#x27;),(2, &#x27;b&#x27;),(3, &#x27;c&#x27;)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># set</span><br><span class="hljs-comment"># set创建一个无序不重复元素集</span><br>a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;apple&quot;</span>)<br>a <span class="hljs-comment"># &#123;&#x27;l&#x27;, &#x27;o&#x27;, &#x27;h&#x27;, &#x27;e&#x27;&#125;</span><br>b <span class="hljs-comment"># &#123;&#x27;l&#x27;, &#x27;e&#x27;, &#x27;a&#x27;, &#x27;p&#x27;&#125;</span><br>a &amp; b <span class="hljs-comment"># 返回a,b的交集，&#123;&#x27;l&#x27;, &#x27;e&#x27;&#125;</span><br>a | b <span class="hljs-comment"># 返回a,b的并集，&#123;&#x27;o&#x27;, &#x27;l&#x27;, &#x27;p&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;a&#x27;&#125;</span><br>a - b <span class="hljs-comment"># 返回a,b的差集，&#123;&#x27;o&#x27;, &#x27;h&#x27;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># enumerate</span><br><span class="hljs-comment"># enumerate逐个返回序列的元组(index,value),即元组迭代器</span><br>t = [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(t):<br>    <span class="hljs-built_in">print</span>(row) <br><span class="hljs-comment"># (0,5),(1,6),(2,7)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">bisect 模块</span><br><span class="hljs-string">内置的bisect模块实现了二分查找以及对有序列表的插入操作。bisect.bisect可以找出新元素应该被插入到哪个位置以保持元列表的有序性，15185864489bisect.insort则将新元素插入到那个正确的位置上</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> bisect<br>t = [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">99</span>,<span class="hljs-number">3</span>]<br>t.sort()<span class="hljs-comment"># [-1,0,2,3,99]</span><br>index = bisect.bisect(t,<span class="hljs-number">5</span>)<span class="hljs-comment"># 返回5应该被插入的位置</span><br>bisect.insort(t,<span class="hljs-number">5</span>) <span class="hljs-comment"># 不用知道位置,直接插入有序列表</span><br><span class="hljs-built_in">print</span>(t)<span class="hljs-comment"># [-1,0,2,3,5,99]</span><br></code></pre></td></tr></table></figure><hr><h2 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># re.match()</span><br><span class="hljs-comment"># 限定开头匹配的方法</span><br><span class="hljs-comment"># 没匹配到返回None,匹配到返回match对象</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;abc123pop&quot;</span><br>r = re.match(<span class="hljs-string">&quot;[a-z]+&quot;</span>,<span class="hljs-built_in">str</span>).group()<br>n = re.match(<span class="hljs-string">&quot;\d+&quot;</span>,<span class="hljs-built_in">str</span>) <span class="hljs-comment"># 返回None</span><br><span class="hljs-built_in">print</span>(r) <span class="hljs-comment"># abc</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># re.search()</span><br><span class="hljs-comment"># 匹配正则表达式第一次的出现,不限定从头开始</span><br><span class="hljs-comment"># 返回匹配结果</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;abc123pop&quot;</span><br>r = re.search(<span class="hljs-string">&quot;\d+&quot;</span>,<span class="hljs-built_in">str</span>).group()<br><span class="hljs-built_in">print</span>(r) <span class="hljs-comment"># 123</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># re.findall()</span><br><span class="hljs-comment"># 匹配所有符合条件的结果</span><br><span class="hljs-comment"># 没匹配到返回[],匹配到返回结果列表</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;abc123pop333p&quot;</span><br>r = re.findall(<span class="hljs-string">&quot;\d+&quot;</span>,<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(r) <span class="hljs-comment"># [&quot;123&quot;,&quot;333&quot;]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># re.sub(pattern,repl,string,flags=0,count=0)</span><br><span class="hljs-comment"># 匹配string结果替换成repl,count指定替换个数,默认全部</span><br><span class="hljs-comment"># 返回替换结果</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;abc123pop333p&quot;</span><br>r = re.sub(<span class="hljs-string">&quot;\d+&quot;</span>,<span class="hljs-string">&quot;哈哈&quot;</span>,<span class="hljs-built_in">str</span>)<br>rn = re.subn(<span class="hljs-string">&quot;\d+&quot;</span>,<span class="hljs-string">&quot;哈哈&quot;</span>,<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(r) <span class="hljs-comment"># &quot;abc哈哈pop哈哈p&quot;</span><br><span class="hljs-built_in">print</span>(rn) <span class="hljs-comment"># (&#x27;abc哈哈pop哈哈p&#x27;, 2)</span><br><span class="hljs-comment"># 返回元组,(替换结果,替换次数)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Scrapy 技术点吐血整理 （详细）</title>
    <link href="/2021/04/16/Scrapy%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/16/Scrapy%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一-初始Scrapy"><a href="#一-初始Scrapy" class="headerlink" title="一    初始Scrapy"></a>一    初始Scrapy</h3><p><img src="/assets/scrapy.jpg" alt="erro img"></p><ul><li><p><strong>安装scrapy</strong></p><p>建议使用python3.6以上版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install scrapy<br></code></pre></td></tr></table></figure></li><li><p><strong>创建scrapy项目</strong></p><p>scrapy startproject projectname</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scrapy startproject projectname</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>scrapy运行流程</strong></p><ul><li>当SPIDER要爬取某URL地址的页面时，需使用该url构造一个Request对象，提交给ENGINE</li><li>Request对象随后进入SCHEDULER按某种算法进行排队，之后的某个时刻SCHEDULER将其出队，送往DOWNLOADER</li><li>DOWNLOADER 根据Request对象中的url地址发送一次HTTP请求到网站服务器，之后用服务器返回的HTTP响应构造一个Response对象，其中包含页面的HTML文本</li><li>Response对象最终会被递送给SPIDER的页面解析函数（构造Request对象时指定）进行处理，页面解析函数从页面中提取数据，封装成Item后提交给ENGINE，Item之后被送往ITEM PIPELINE进行处理，最终可能由EXPORTER以某种数据格式写入文件（csv,json）；另一方面，页面解析函数还从页面中提取链接（URL），构造出新的Request对象提交给ENGINE</li></ul><p><strong>Request对象</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url（必选）</td><td>请求页面的URL</td></tr><tr><td>callback</td><td>回调函数，指定回调函数，若为空，默认parse函数</td></tr><tr><td>method</td><td>HTTP请求的方法，默认GET</td></tr><tr><td>headers</td><td>请求头，若{‘Cookie’:’None’}，表示禁止发送cookie</td></tr><tr><td>body</td><td>HTTP请求的正文，bytes或str类型</td></tr><tr><td>cookies</td><td>传cookie，dict类型</td></tr><tr><td>meta</td><td>Request元数据字典，dict类型，用于给框架中其他组件传递信息，比如Item Pipeline（request.meta）</td></tr><tr><td>encoding</td><td>默认’utf-8’</td></tr><tr><td>priority</td><td>优先级，默认为0，优先级高的请求优先下载</td></tr><tr><td>dont_filter</td><td>默认False，默认去重，如果需要重复访问，该为True</td></tr><tr><td>errback</td><td>请求出现异常或404时的回调函数</td></tr></tbody></table><p><strong>Response对象</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>HTTP相应的url,str类型</td></tr><tr><td>status</td><td>HTTP响应的状态码，int类型，例如200，404</td></tr><tr><td>headers</td><td>HTTP相应的头部，类字典类型，调用方式：response.headers.get(getlist)(‘Content-Type’ | ‘Set-Cookie’)</td></tr><tr><td>body</td><td>HTTP响应正文，bytes类型</td></tr><tr><td>text</td><td>文本形式的HTTP响应正文，str类型，由body解码得来，text=body.decode(response.encoding)</td></tr><tr><td>encoding</td><td>HTTP正文编码</td></tr><tr><td>request</td><td>产生该HTTP响应的Request对象</td></tr><tr><td>meta</td><td>传递的元数据</td></tr><tr><td>selector</td><td>略</td></tr><tr><td><strong>方法</strong></td><td></td></tr><tr><td>xpath(query)</td><td>dddd</td></tr><tr><td>css(query)</td><td></td></tr><tr><td>urljoin(url)</td><td>构造绝对url, 如baidu.com, a/index.html调用后结果为baidu.com/a/index.html</td></tr></tbody></table><h3 id="二-使用Item封装数据"><a href="#二-使用Item封装数据" class="headerlink" title="二 使用Item封装数据"></a>二 使用Item封装数据</h3><p>当使用scrapy爬取数据时我们一般在items.py文件中数据类，使用Field描述字段，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> Item,Field<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookItem</span>(<span class="hljs-params">Item</span>):</span><br>    bookNames = Field()<br>    bookAuthors = Field()<br></code></pre></td></tr></table></figure><ul><li><p>Item支持字典接口，因此使用数据类和python字典类似，如：BookItem[‘bookNames’]</p></li><li><p>对字段进行赋值时，BookItem内部会对字段名进行检测，如果赋值一个没有定义的字段，就会抛出KeyError异常</p></li></ul><h3 id="三-使用Item-Pipeline-处理数据"><a href="#三-使用Item-Pipeline-处理数据" class="headerlink" title="三 使用Item Pipeline 处理数据"></a>三 使用Item Pipeline 处理数据</h3><blockquote><p>Spider获得数据Item会传给数据处理中间件pipelines.py，我们可以在这里进行对数据的清洗、校验、去重和保存</p></blockquote><p>一般的管道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">一般的管道不需要继承别的类</span><br><span class="hljs-string">只需要实现几个某些特定的方法，例：</span><br><span class="hljs-string">process_item(必须)</span><br><span class="hljs-string">open_spider</span><br><span class="hljs-string">close_spidern</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonPipeline</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">prcess_item</span>(<span class="hljs-params">self,item,spider</span>):</span><br>        ...<br>        ...<br>        <span class="hljs-keyword">return</span> item<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>...        <br></code></pre></td></tr></table></figure><hr><p>专门下载处理图片的管道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pipelines.py</span><br><br><span class="hljs-keyword">from</span> scrapy.pipelines.images <span class="hljs-keyword">import</span> ImagesPipeline<br><span class="hljs-keyword">from</span> scrapy.exceptions <span class="hljs-keyword">import</span> DropItem<br><span class="hljs-keyword">import</span> scrapy,re<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyImagePipeline</span>(<span class="hljs-params">ImagesPipeline</span>):</span><br>    <span class="hljs-comment"># 可以在这里重写文件目录</span><br>    <span class="hljs-comment"># 默认的是url的md5值作为目录名</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file_path</span>(<span class="hljs-params">self,request,response=<span class="hljs-literal">None</span>,info=<span class="hljs-literal">None</span></span>):</span><br>        item = request.meta[<span class="hljs-string">&#x27;item&#x27;</span>]<br>        folder = strip(item[<span class="hljs-string">&#x27;name&#x27;</span>])<br>        image_guid = request.url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        filename = <span class="hljs-string">u&quot;full/&#123;0&#125;/&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(folder,image_guid)<br>        <span class="hljs-keyword">return</span> filename<br><span class="hljs-comment"># 图片下载中转站</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_media_requests</span>(<span class="hljs-params">self, item, info</span>):</span><br>        <span class="hljs-keyword">for</span> image_url <span class="hljs-keyword">in</span> item[<span class="hljs-string">&#x27;image_urls&#x27;</span>]:<br>            <span class="hljs-keyword">yield</span> scrapy.Request(image_url,meta=&#123;<span class="hljs-string">&#x27;item&#x27;</span>:item&#125;)<br><br> <span class="hljs-comment"># 图片下载成功或者失败后会进入这个函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_completed</span>(<span class="hljs-params">self, results, item, info</span>):</span><br>image_paths = [x[<span class="hljs-string">&#x27;path&#x27;</span>] <span class="hljs-keyword">for</span> ok, x <span class="hljs-keyword">in</span> results <span class="hljs-keyword">if</span> ok]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> image_paths:<br>            <span class="hljs-keyword">raise</span> DropItem(<span class="hljs-string">&quot;Item contains no images&quot;</span>)<br>        <span class="hljs-keyword">return</span> item<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strip</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param path: 需要清洗的文件夹名字</span><br><span class="hljs-string">    :return: 清洗掉Windows系统非法文件夹名字的字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    path = re.sub(<span class="hljs-string">r&#x27;[？\\*|“&lt;&gt;:/]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-built_in">str</span>(path))<br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># items.py</span><br><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyItem</span>(<span class="hljs-params">scrapy.Item</span>):</span><br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br>    name = scrapy.Field()<br>    <span class="hljs-comment"># 默认字段image_urls,需要赋为一个可迭代对象</span><br>    image_urls = scrapy.Field()<br></code></pre></td></tr></table></figure><hr><p>专门下载文件其他文件的管道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pipelines.py</span><br><br><span class="hljs-keyword">from</span> scrapy.pipelines.images <span class="hljs-keyword">import</span> ImagesPipeline<br><span class="hljs-keyword">from</span> scrapy.exceptions <span class="hljs-keyword">import</span> DropItem<br><span class="hljs-keyword">import</span> scrapy,re<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilePipeline</span>(<span class="hljs-params">ImagesPipeline</span>):</span><br>    <span class="hljs-comment"># 可以在这里重写文件目录</span><br>    <span class="hljs-comment"># 默认的是url的md5值作为目录名</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file_path</span>(<span class="hljs-params">self,request,response=<span class="hljs-literal">None</span>,info=<span class="hljs-literal">None</span></span>):</span><br>        item = request.meta[<span class="hljs-string">&#x27;item&#x27;</span>]<br>        folder = strip(item[<span class="hljs-string">&#x27;name&#x27;</span>])<br>        file_guid = request.url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        filename = <span class="hljs-string">u&quot;full/&#123;0&#125;/&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(folder,file_guid)<br>        <span class="hljs-keyword">return</span> filename<br><span class="hljs-comment"># 文件下载中转站</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_media_requests</span>(<span class="hljs-params">self, item, info</span>):</span><br>        <span class="hljs-keyword">for</span> file_urls <span class="hljs-keyword">in</span> item[<span class="hljs-string">&#x27;file_urls&#x27;</span>]:<br>            <span class="hljs-keyword">yield</span> scrapy.Request(file_url,meta=&#123;<span class="hljs-string">&#x27;item&#x27;</span>:item&#125;)<br><br> <span class="hljs-comment"># 文件下载成功或者失败后会进入这个函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_completed</span>(<span class="hljs-params">self, results, item, info</span>):</span><br>file_paths = [x[<span class="hljs-string">&#x27;path&#x27;</span>] <span class="hljs-keyword">for</span> ok, x <span class="hljs-keyword">in</span> results <span class="hljs-keyword">if</span> ok]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_paths:<br>            <span class="hljs-keyword">raise</span> DropItem(<span class="hljs-string">&quot;Item contains no images&quot;</span>)<br>        <span class="hljs-keyword">return</span> item<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strip</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param path: 需要清洗的文件夹名字</span><br><span class="hljs-string">    :return: 清洗掉Windows系统非法文件夹名字的字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    path = re.sub(<span class="hljs-string">r&#x27;[？\\*|“&lt;&gt;:/]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-built_in">str</span>(path))<br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyItem</span>(<span class="hljs-params">scrapy.Item</span>):</span><br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br>    name = scrapy.Field()<br>    file_urls = scrapy.Field()<br></code></pre></td></tr></table></figure><hr><p>最后，需要在settings.py文件里面配置上写好的管道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-comment"># 文件下载链接失效的天数</span><br><span class="hljs-comment"># 一般scrapy运行后会把下载url缓存在本地提高效率</span><br>FILES_EXPIRES = <span class="hljs-number">30</span><br><span class="hljs-comment"># 文件下载后保存的地址</span><br>FILES_STORE = <span class="hljs-string">&quot;D:/download/&quot;</span><br><span class="hljs-comment"># 图片同理</span><br>IMAGES_EXPIRES = <span class="hljs-number">30</span><br>IMAGES_STORE = <span class="hljs-string">&quot;D:/images/&quot;</span><br><br><span class="hljs-comment"># 在这里把写好的管道配置上，value项是执行的先后顺序，越小越先执行</span><br>ITEM_PIPELINES = &#123;<br>    <span class="hljs-comment"># 如果懒得写pipeline可以用默认的</span><br>    <span class="hljs-string">&#x27;scrapy.pipelines.images.ImagesPipeline&#x27;</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-comment"># 如果写了</span><br>    <span class="hljs-string">&#x27;projectname.pipelines.images.MyImagesPipeline&#x27;</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-comment"># 文件同理</span><br>    <span class="hljs-string">&#x27;scrapy.pipelines.files.FilesPipeline&#x27;</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-string">&#x27;projectname.pipelines.images.MyFilesPipeline&#x27;</span>:<span class="hljs-number">300</span>,<br>&#125;<br><br><span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>FilesPipeline</th><th>ImagesPipeline</th></tr></thead><tbody><tr><td>导入路径</td><td>scrapy.pipelines.files.FilesPipeline</td><td>scrapy.pipelines.images.ImagesPipeline</td></tr><tr><td>Item字段</td><td>file_urls,files</td><td>image_urls,images</td></tr><tr><td>下载目录</td><td>FILES_STORE</td><td>IMAGES_STORE</td></tr></tbody></table><p>最后还有两个图片下载的小功能：</p><ul><li><p>为图片生成缩略图，在settings.py中添加以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以自定义尺寸和字段</span><br><span class="hljs-comment"># 引擎会自动创建字段文件夹</span><br>IMAGES_THUMBS = &#123;<br>    <span class="hljs-string">&#x27;small&#x27;</span>:(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>),<br>    <span class="hljs-string">&#x27;big&#x27;</span>:(<span class="hljs-number">270</span>,<span class="hljs-number">270</span>),<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>过滤尺寸过小的图片（只存大图），在settings.py中添加以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">IMAGES_MIN_WIDTH = <span class="hljs-number">110</span><br>IMAGES_MIN_HEIGHT = <span class="hljs-number">110</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="四-使用LinkExtractor提取数据"><a href="#四-使用LinkExtractor提取数据" class="headerlink" title="四 使用LinkExtractor提取数据"></a>四 使用LinkExtractor提取数据</h3><blockquote><p>主要用于提取大量且复杂的链接</p></blockquote><p>先给出实例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy.linkextractors <span class="hljs-keyword">import</span> LinkExtractor<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooksSpider</span>(<span class="hljs-params">scrapy.Spider</span>):</span><br>    ...<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self,response</span>):</span><br>        ...<br>        <span class="hljs-comment"># 提取链接</span><br>        <span class="hljs-comment"># 下一页的 url 在 ul.parse &gt; li.next &gt; a 里面</span><br>        le = LinkExtractor(restrict_css=<span class="hljs-string">&#x27;ul.pager li.next&#x27;</span>)<br>        <span class="hljs-comment"># 这里会提取所有链接，返回链接对象列表</span><br>        links = le.extract_links(response)<br>        <span class="hljs-keyword">if</span> links:<br>            next_url = links[<span class="hljs-number">0</span>].url<br>            <span class="hljs-keyword">yield</span> scrapy.Request(next_url,callback=self.parse)<br></code></pre></td></tr></table></figure><p><strong>LinkExtractor构造器的各个参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>allow</td><td>接收一个正则表达式或列表，提取绝对配对url，若为空，则提取全部链接</td></tr><tr><td>deny</td><td>接收一个正则表达式或列表，与allow相反，排除绝对匹配的url</td></tr><tr><td>allow_domains</td><td>接受一个域名或域名列表，提取到指定域的链接</td></tr><tr><td>deny_domains</td><td>接受一个域名或域名列表，排除指定域的链接</td></tr><tr><td>restrict_xpaths</td><td>接受一个xpath表达式或xpath表达式列表，提取符合规则的所有链接</td></tr><tr><td>restrict_css</td><td>接受一个css选择器或css选择器列表，提取符合规则的所有链接</td></tr><tr><td>tags</td><td>接收一个标签（字符串）或列表，提取指定标签内的链接，默认为[‘a’,’area’]</td></tr><tr><td>attrs</td><td>接收一个属性（字符串）或列表，提取指定属性内的链接，默认为[‘href’]</td></tr><tr><td>unique</td><td>True/False 链接是否去重</td></tr><tr><td>process_value</td><td>接收func(value)的回调函数，如果传递了该函数，LinkExtractor将调用该回调函数对提取的每一个链接进行处理，回调函数正常情况应返回一个字符串（处理结果），想要抛弃返回None</td></tr></tbody></table><hr><h3 id="五-CrawlSpider"><a href="#五-CrawlSpider" class="headerlink" title="五 CrawlSpider"></a>五 CrawlSpider</h3><blockquote><p>这里不多说了，发现一个CSDN博客写的很全，大体上是前一章的补充</p></blockquote><p><a href="https://blog.csdn.net/killeri/article/details/80255500">很全的网站</a></p><p><a href="https://www.jianshu.com/p/83c73071d3cb">补充的网站</a></p><hr><h3 id="六-存入数据库"><a href="#六-存入数据库" class="headerlink" title="六 存入数据库"></a>六 存入数据库</h3><blockquote><p>原理就是写个数据保存的管道</p></blockquote><ul><li><p><strong>SQLite</strong></p><blockquote><p>SQLite 是一个文本型轻量级数据库，它的处理速度很快，在数据量不是很大的情况下，使用SQLite足够了</p><p>如果使用就不举例了，这里直接给出实例Pipeline代码</p></blockquote><p><strong>Python标准库自带sqlite3模块，无需安装</strong></p><p>实例代码：pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQLitePipeline</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    <span class="hljs-comment"># 读取配置文件中指定的数据库</span><br>        db_name = spider.settings.get(<span class="hljs-string">&#x27;SQLITE_DB_NAME&#x27;</span>,<span class="hljs-string">&#x27;scrapy_defaut.db&#x27;</span>)<br>        self.db_conn = sqlite3.connect(db_name)<br>        self.db_cur = self.db_conn.cursor()<br>    <br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    self.db_conn.commit()<br>    self.db_conn.close()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_spider</span>(<span class="hljs-params">self,item,spider</span>):</span><br>self.insert_db(item)<br><br><span class="hljs-keyword">return</span> item<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_db</span>(<span class="hljs-params">self,item</span>):</span><br>values = (<br>item[<span class="hljs-string">&#x27;..&#x27;</span>],<br>item[<span class="hljs-string">&#x27;..&#x27;</span>],<br>...<br><br>)<br>sql = <span class="hljs-string">&#x27;INSERT INTO tableName VALUES (?,?,....,)&#x27;</span><br>self.db_cur.execute(sql,values)<br></code></pre></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SQLITE_DB_NAME = <span class="hljs-string">&#x27;scrapy.db&#x27;</span><br>ITEM_PIPELINE = &#123;<br>    <span class="hljs-string">&#x27;projectname.pipelines.SQLitePipeline&#x27;</span>:<span class="hljs-number">400</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>MySQL</strong></p><blockquote><p>MySQL 是一个应用极其广泛的关系型数据库，它是开源免费的，可以支持大型数据库，在也个人用户和中小企业首选</p><p>用法同样几乎和sqlite3相同</p></blockquote><p>安装：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install mysqlclient<br></code></pre></td></tr></table></figure><p>实例代码：pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> MySQLdb<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQLPipeline</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    <span class="hljs-comment"># 读取配置文件中指定的数据库</span><br>        db = spider.settings.get(<span class="hljs-string">&#x27;SQLITE_DB_NAME&#x27;</span>,<span class="hljs-string">&#x27;scrapy_defaut&#x27;</span>)<br>        host = spider.settings.get(<span class="hljs-string">&#x27;MYSQL_HOST&#x27;</span>,<span class="hljs-string">&#x27;localhost&#x27;</span>)<br>        port = spider.settings.get(<span class="hljs-string">&#x27;MYSQL_PORT&#x27;</span>,<span class="hljs-number">3306</span>)<br>        user = spider.settings.get(<span class="hljs-string">&#x27;MYSQL_USER&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>)<br>        passwd = spider.settings.get(<span class="hljs-string">&#x27;MYSQL_PASSWORD&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>)<br>        self.db_conn = MySQLdb.connect(host=host,port=port,db=db,<br>        user=user,passwd=passwd,charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        self.db_cur = self.db_conn.cursor()<br>    <br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    self.db_conn.commit()<br>    self.db_conn.close()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_spider</span>(<span class="hljs-params">self,item,spider</span>):</span><br>self.insert_db(item)<br><br><span class="hljs-keyword">return</span> item<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_db</span>(<span class="hljs-params">self,item</span>):</span><br>values = (<br>item[<span class="hljs-string">&#x27;..&#x27;</span>],<br>item[<span class="hljs-string">&#x27;..&#x27;</span>],<br>...<br><br>)<br>sql = <span class="hljs-string">&#x27;INSERT INTO tableName VALUES (?,?,....,)&#x27;</span><br>self.db_cur.execute(sql,values)<br></code></pre></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">SQLITE_DB_NAME = <span class="hljs-string">&#x27;scrapy.db&#x27;</span><br>MYSQL_HOST = <span class="hljs-string">&#x27;localhost&#x27;</span><br>MYSQL_USER = <span class="hljs-string">&#x27;root&#x27;</span><br>MYSQL_PASSWORD = <span class="hljs-string">&#x27;root&#x27;</span><br>ITEM_PIPELINES = &#123;<br>    <span class="hljs-string">&#x27;projectname.pipelines.MySQLPipeline&#x27;</span>:<span class="hljs-number">401</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>MongoDB</strong></p><blockquote><p>MongoDB 是一个面向文档的非关系型数据库，功能强大、灵活、易于扩展</p></blockquote><p>安装：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install pymongo<br></code></pre></td></tr></table></figure><p>仿照SQLitePipeline 实现 MongoDBPipeline ，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<br><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> Item<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQLPipeline</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    <span class="hljs-comment"># 读取配置文件中指定的数据库</span><br>        db_url = spider.settings.get(<span class="hljs-string">&#x27;MONGODB_URL&#x27;</span>,<span class="hljs-string">&#x27;mongodb://localhost:27017&#x27;</span>)<br>        db_name = spider.settings.get(<span class="hljs-string">&#x27;MONGODB_DB_NAME&#x27;</span>,<span class="hljs-string">&#x27;scapy_default&#x27;</span>)<br>        self.db_clinet = MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017&#x27;</span>)<br>        self.db = self.db_clinet[db_name]<br>    <br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    self.db_clinet.close()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_spider</span>(<span class="hljs-params">self,item,spider</span>):</span><br>self.insert_db(item)<br><br><span class="hljs-keyword">return</span> item<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_db</span>(<span class="hljs-params">self,item</span>):</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(item,Item):<br>item = <span class="hljs-built_in">dict</span>(item)<br>self.db.dbname.insert_one(item)<br></code></pre></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">MONGODB_URL = <span class="hljs-string">&#x27;mongodb://localhost:27017&#x27;</span><br>MONGODB_DB_NAME = <span class="hljs-string">&#x27;scrapy.db&#x27;</span><br>ITEM_PIPELINES = &#123;<br>    <span class="hljs-string">&#x27;projectname.pipelines.MySQLPipeline&#x27;</span>:<span class="hljs-number">403</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Redis</strong></p><blockquote><p>Redis 是一个使用 ANSI C 编写的高性能 Key-Value 数据库，使用内存作为主存储，内存中的数据也可以被持久化到硬盘</p></blockquote><p>安装：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install redis<br></code></pre></td></tr></table></figure><p>仿照SQLitePipeline 实现 RedisPipeline ，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> Item<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQLPipeline</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    <span class="hljs-comment"># 读取配置文件中指定的数据库</span><br>        db_host = spider.settings.get(<span class="hljs-string">&#x27;REDIS_HOST&#x27;</span>,<span class="hljs-string">&#x27;localhost&#x27;</span>)<br>        db_port = spider.settings.get(<span class="hljs-string">&#x27;REDIS_PORT&#x27;</span>,<span class="hljs-number">6379</span>)<br>        db_index = spider.settings.get(<span class="hljs-string">&#x27;REDIS_DB_INDEX&#x27;</span>,<span class="hljs-number">0</span>)<br>    <br>    self.db_conn = redis.StrictRedis(host=db_host,port=db_port,db=db_index)<br>    self.item_i = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close_spider</span>(<span class="hljs-params">self,spider</span>):</span><br>    self.db_conn.connection_pool.disconnect()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span>(<span class="hljs-params">self,item,spider</span>):</span><br>self.insert_db(item)<br><br><span class="hljs-keyword">return</span> item<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_db</span>(<span class="hljs-params">self,item</span>):</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(item,Item):<br>item = <span class="hljs-built_in">dict</span>(item)<br><br>self.item_i += <span class="hljs-number">1</span><br>self.db_conn.hmset(<span class="hljs-string">&#x27;%s.tableName:%s&#x27;</span>%self.item_i,item)<br></code></pre></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">REDIS_HOST = <span class="hljs-string">&#x27;localhost&#x27;</span><br>REDIS_PORT = <span class="hljs-number">6379</span><br>REDIS_DB_INDEX = <span class="hljs-number">0</span><br>ITEM_PIPELINES = &#123;<br>    <span class="hljs-string">&#x27;projectname.pipelines.MySQLPipeline&#x27;</span>:<span class="hljs-number">404</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="六-使用-Exporter-导出数据"><a href="#六-使用-Exporter-导出数据" class="headerlink" title="六 使用 Exporter 导出数据"></a>六 使用 Exporter 导出数据</h3><blockquote><p>scrapy中负责导出数据的组件叫Exporter，scrapy内部实现了多个Exporter，每个Exporter实现一种数据格式的导出，支持的数据格式如下</p></blockquote><ol><li>JSON</li><li>JSON lines</li><li>CSV</li><li>XML</li><li>Pickle</li><li>Marshal</li></ol><p>大部分情况下只用到前四种，后两种是python特有的，需要其他数据格式自行实现Exporter即可</p><hr><p>一般用法：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">scrapy crawl projectName -t 导出格式 -o 导出文件名<br>例：scrapy crawl douban -t csv -o douban.csv<br></code></pre></td></tr></table></figure><p>另外，指定带出文件路径时，还可以使用%(name)s和%(time)s两个特殊变量</p><ul><li>%(name)s 会被替换为Spider的名字</li><li>%(time)s 会被替换为文件创建时间</li></ul><p>几个常用的配置文件：</p><ul><li><p>FEED_URL 导出文件路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">FEED_URL = <span class="hljs-string">&#x27;export_data/%(name)s.data&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>FEED_FORMAT 导出文件格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">FEED_FORMAT = <span class="hljs-string">&#x27;csv&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>FEED_EXPORT_ENCODING 导出文件编码 默认json使用数字编码 其他使用utf-8编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">FEED_EXPORT_ENCODING = <span class="hljs-string">&#x27;gbk&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>FEED_EXPORT_FIELDS 导出数据包含的字段 默认情况下导出所有字段 并指定次序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">FEED_EXPORT_FIELDS = [<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>,<span class="hljs-string">&#x27;price&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li><p>FEED_EXPORTERS 用户自定义的 Exporter 字典，添加新的导出数据格式时使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">FEED_EXPORTERS = &#123;<span class="hljs-string">&#x27;excel&#x27;</span>:<span class="hljs-string">&#x27;my_project.my_exporters.ExcelItemExporter&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>自定义导出数据类型，例：excel</strong></p><p>每一个Exporter都继承自BaseItemExporter，BaseItemExporter提供了三个接口供子类实现：</p><ul><li><p>exporter_item(self,item)</p><p>负责导出爬取到的每一项数据，参数item 为每一项爬取到的数据，每个子类必须实现该方法</p></li><li><p>start_exporting(self)</p><p>在导出开始时被调用，可在该方法中执行某些初始化工作</p></li><li><p>finish_exporting(self)</p><p>在导出完成时被调用，可在该方法中执行某些清理工作</p></li></ul><p>在项目中创建my_exporters.py，与settings.py同级，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy.exporters <span class="hljs-keyword">import</span> BaseItemExporter<br><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-comment"># 这里导入xlwt库对excel数据处理</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExcelItemExporter</span>(<span class="hljs-params">BaseItemExporter</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,file,**kwargs</span>):</span><br>        self._configure(kwargs)<br>        self.file = file<br>        self.wbook = xlwt.Workbook()<br>        self.wsheet = self.wbook.add_sheet(<span class="hljs-string">&#x27;scrapy&#x27;</span>)<br>        self.row = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">finish_exporting</span>(<span class="hljs-params">self</span>):</span><br>        self.wbook.save(self.file)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export_item</span>(<span class="hljs-params">self,item</span>):</span><br>        <span class="hljs-comment"># 调用基类的方法，获取item所有字段的迭代器</span><br>        fields = self._get_serialized_fields(item)<br>        <span class="hljs-keyword">for</span> col, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(x <span class="hljs-keyword">for</span> _,x <span class="hljs-keyword">in</span> fields):<br>            self.wsheet.write(self.row,col,v)<br>        self.row += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在设置文件里添加自定义Exporter</span><br>FEED_EXPORTERS = &#123;<br>    <span class="hljs-string">&#x27;excel&#x27;</span>:<span class="hljs-string">&#x27;example.my_exporters.ExcelItemExporter&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ps：如果导出csv格式，会在第一行自动加上item字段名，而excel不会加上</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/16/hello-world/"/>
    <url>/2021/04/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
